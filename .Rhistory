nc_map_prevalence <- nc_map_prevalence %>%
mutate(fips = as.integer(fips))
# 1.1.6 Merge the prevalence data with the shapefile
nc_map_prevalence <- nc_map_prevalence %>%
left_join(covid_prevalence_changes, by = c("fips" = "fips"))
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
install.packages("usmap")
install.packages("sf")
#move legend to inside
theme(legend.position = "right")
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "right")
plot_usmap(include = c("NC"), data = covid_prevalence_changes, values = "change_in_prevalence", regions= "counties")+
scale_fill_continuous(low= "white", high = "blue", name = "Prevalence of Covid", label= scales::comma)+
labs(title = "Change in Covid-19 Prevalance in NC Counties", subtitle = "Data from July 2, 2020 to July 14, 2020 Adjusted for Population")+
theme(legend.position = "right")
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "bottom")
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "bottom")+
theme_void()
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "bottom")+
theme_minimal()
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "bottom")+
theme_minimal()
# 1.1.7 Plot the map -- DONT KNOW IF I WILL USE.. Don't like long and latitude, could figure out changing x & y --
ggplot(nc_map_prevalence) +
geom_sf(aes(fill = change_in_prevalence)) +
scale_fill_viridis_c(option = "plasma", name = "Change in Prevalence") +
theme_minimal() +
labs(title = "Change in COVID Prevalence in NC Counties",
subtitle = "From 2020-07-02 to 2020-07-14")+
#remove lat long
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())+
#move legend to inside
theme(legend.position = "bottom")
plot_usmap(include = c("NC"), data = covid_prevalence_changes, values = "change_in_prevalence", regions= "counties")+
scale_fill_continuous(low= "white", high = "blue", name = "Prevalence of Covid", label= scales::comma)+
labs(title = "Change in Covid-19 Prevalance in NC Counties", subtitle = "Data from July 2, 2020 to July 14, 2020 Adjusted for Population")+
theme(legend.position = "right")
#use selected data to create summary table
cdc_groups_summary_table <- selected_data %>%
tbl_summary(
by = group_name,
label = list(
group_name ~ "Group Name"
)
## 1.2 CDC Data ----
### 1.2.1 Summary Stats
summary(cdc_data_current)
## 1.2 CDC Data ----
### 1.2.1 Summary Stats
summary(cdc_data_current)
### 1.2.1 Summary Stats
summary(cdc_data_current)
# 01_CLEAN_DATA.R
# 0. SETUP ----
## Install EpiSewer & CmdStan
## I'm not yet sure why you need this, so I commented it out
# remotes::install_github("adrian-lison/EpiSewer", dependencies = TRUE)
# cmdstanr::check_cmdstan_toolchain()
# cmdstanr::install_cmdstan(cores = 2) # Use more cores to speed up
## Load Packages
install.packages("pacman")
pacman::p_load(rio,tidyverse, janitor, psych, gtsummary, here, readxl, pacman, EpiSewer, ggplot2, data.table, here)
## Use here() to set working directory by specifying i_am()
setwd("~/Documents/GitHub/mask-ban-analysis/Code")
here::i_am("Code/01_clean_data.r")
# 1. LOAD AND PROCESS DATA ----
## 1.1 NYTimes Data - Mask Use by County ----
### 1.1.1 Import Data
nyt_mask_use_by_county <- import(here("Data/raw_data/mask-use-by-county.csv")) %>%
janitor::clean_names()
### 1.1.2 Rename Column
nyt_mask_use_by_county <- nyt_mask_use_by_county %>%
rename(fips = countyfp)
## 1.2 NYTimes Data - County Info ----
## You don't actually need this since you're getting so much from the 2020 rates dataset, it is exactly the same.
# ### 1.2.1 Import Data
# nyt_county_info <- import(here("Data/raw_data/us-counties.csv")) %>%
#   janitor::clean_names()
#
# ### 1.2.2 Filter to only keep NC Data
# nyt_county_info <- nyt_county_info %>%
#   filter(state == "North Carolina")
#
# ### 1.2.3 Filter to date ranges
# nyt_county_info <- nyt_county_info %>%
#   filter(date >= as.Date("2020-07-02") & date <= as.Date("2020-07-14"))
### 1.2.4 Delete unnecessary columns
# ### Since you have county rates from another dataset, deleting the ones here
# nyt_county_info <- nyt_county_info %>%
#   select(-cases, -deaths, -state)
## 1.3 COVID RATES BY COUNTY ----
### 1.3.1 Import Data
nyt_covid_rates_by_county <- import(here("Data/raw_data/us-counties-2020.csv")) %>%
janitor::clean_names()
### 1.3.2 Filter to only keep NC Data
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
filter(state == "North Carolina")
### 1.3.3 Filter to date ranges
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
filter(date >= as.Date("2020-07-02") & date <= as.Date("2020-07-14"))
### 1.3.4 Delete unnecessary columns
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
select(-state)
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
# cdc_immunization_data <- import(here("Data/raw_data/National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
#   janitor::clean_names()
#
# ### 1.4.2 Filter to only keep NC Data
# cdc_immunization_data <- cdc_immunization_data %>%
#   filter(geography == "North Carolina")
## 1.5 NC Population Data ----
### 1.5.1 Import Data
nc_population_data_by_county <- import(here("Data/raw_data/county-population-totals-2.csv")) %>%
janitor::clean_names()
### 1.5.2 Rename value to population
nc_population_data_by_county <- nc_population_data_by_county %>%
rename(population = value)
### 1.5.2 Delete unnecessary columns
nc_population_data_by_county <- nc_population_data_by_county %>%
select(-variable, -council_of_government_region, -metropolitan_statistical_area_2013, -vintage, -estimate_projection, -county)
## 1.6 Recent Wastewater Data ----
### 1.6.1 Import Data
wastewater_data_by_county <- import(here("Data/raw_data/wastewater_latest.csv")) %>%
janitor::clean_names()
### 1.6.2 Rename county_names to county
wastewater_data_by_county <- wastewater_data_by_county %>%
rename(county = county_names, date = date_new)
### 1.6.3 Filter to only keep dates
wastewater_data_by_county <- wastewater_data_by_county %>%
filter(date >= as.Date("2021-07-02") & date <= as.Date("2021-07-14"))
## 1.7 CDC atlas risk factors Data ----
### 1.7.1 Import Data
cdc_risk_factors<- import(here("Data/raw_data/CDC_atlas_risk_factors.csv")) %>%
janitor::clean_names()
### 1.7.2 Filter to only keep NC Data
cdc_risk_factors_nc <- cdc_risk_factors %>%
filter(cnty_fips>= "37000"& cnty_fips <= "38000")
### 1.7.3 Rename column cnty_fips to fips
cdc_risks_nc <- cdc_risk_factors_nc %>%
rename(fips = cnty_fips)
### 1.7.4 Remove county name column
cdc_risks_nc <- cdc_risks_nc %>%
select(-"display_name")
## 1.8 Percent nonwhite population Data ----
###1.8.1 Import Data
percent_nonwhite_pop <- import(here("Data/raw_data/percent_nonwhite_pop.csv")) %>%
janitor::clean_names()
### 1.8.2 Filter to only keep NC Data
nc_percent_nonwhite_pop <-percent_nonwhite_pop %>%
filter(fips>= "37000" & fips<= "38000")
## 1.9 Population density Data ----
### 1.9.1 Import Data
population_density <- import(here("Data/raw_data/population_density.csv")) %>%
janitor::clean_names()
### 1.9.2 Filter to only keep NC Data
nc_population_density <-population_density %>%
filter(fips>= "37000" & fips<= "38000")
### 1.9.3 Remove county name column
nc_population_density <- nc_population_density %>%
select(-"name")
# 2. MERGING DATA ----
## 2.1 Left join all datasets by fips, in order that it was imported
merged_data <- nyt_covid_rates_by_county %>%
left_join(nyt_mask_use_by_county, by = "fips") %>%
# left_join(cdc_immunization_data, by = "fips") %>%
left_join(nc_population_data_by_county, by = "fips") %>%
# %>% left_join(wastewater_data_by_county, by = "county", "date")
## Wastewater has a lot of missing data for now, so it is causing issues. I will return to this later
## NOT USING WASTEWATER ANYMORE
left_join(cdc_risks_nc, by = "fips") %>%
left_join(nc_percent_nonwhite_pop, by = "fips") %>%
left_join(nc_population_density, by = "fips")
## 2.2 Add column for covid prevalance
merged_data <- merged_data %>%
mutate(prevalence = cases / population)
# 3. SAVE CLEANED DATA ----
## Save cleaned data to cleaned_data folder
write_csv(merged_data, here("Data/cleaned_data/merged_data.csv"))
install.packages("pacman")
## 1.2 CDC Data ----
### 1.2.1 Summary Stats
summary(cdc_data_current)
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
# cdc_immunization_data <- import(here("Data/raw_data/National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
#   janitor::clean_names()
#
# ### 1.4.2 Filter to only keep NC Data
# cdc_immunization_data <- cdc_immunization_data %>%
#   filter(geography == "North Carolina")
view(cdc_immunization_data)
View(covid_prevalence_changes)
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
# cdc_immunization_data <- import(here(~/Documents/GitHub/mask-ban-analysis/"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
#   janitor::clean_names()
#
# ### 1.4.2 Filter to only keep NC Data
# cdc_immunization_data <- cdc_immunization_data %>%
#   filter(geography == "North Carolina")
library(readr)
National_Immunization_Survey_Adult_COVID_Module_NIS_ACM_COVIDVaxViews_Data_Centers_for_Disease_Control_and_Prevention_cdc_gov_20240627 <- read_csv("~/Documents/GitHub/mask-ban-analysis/National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")
View(National_Immunization_Survey_Adult_COVID_Module_NIS_ACM_COVIDVaxViews_Data_Centers_for_Disease_Control_and_Prevention_cdc_gov_20240627)
### 1.4.1 Import Data
# cdc_immunization_data <- import(here(~/Documents/GitHub/mask-ban-analysis/"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
#   janitor::clean_names()
#
# ### 1.4.2 Filter to only keep NC Data
# cdc_immunization_data <- cdc_immunization_data %>%
#   filter(geography == "North Carolina")
View(National_Immunization_Survey_Adult_COVID_Module_NIS_ACM_COVIDVaxViews_Data_Centers_for_Disease_Control_and_Prevention_cdc_gov_20240627)
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
cdc_immunization_data <- import(here(~/Documents/GitHub/mask-ban-analysis"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
### 1.4.1 Import Data
cdc_immunization_data <- import(~/Documents/GitHub/mask-ban-analysis"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
### 1.5.2 Rename value to population
nc_population_data_by_county <- National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv %>%
rename(population = value)
View(National_Immunization_Survey_Adult_COVID_Module_NIS_ACM_COVIDVaxViews_Data_Centers_for_Disease_Control_and_Prevention_cdc_gov_20240627)
View(National_Immunization_Survey_Adult_COVID_Module_NIS_ACM_COVIDVaxViews_Data_Centers_for_Disease_Control_and_Prevention_cdc_gov_20240627)
# 01_CLEAN_DATA.R
# 0. SETUP ----
## Install EpiSewer & CmdStan
## I'm not yet sure why you need this, so I commented it out
# remotes::install_github("adrian-lison/EpiSewer", dependencies = TRUE)
# cmdstanr::check_cmdstan_toolchain()
# cmdstanr::install_cmdstan(cores = 2) # Use more cores to speed up
## Load Packages
install.packages("pacman")
pacman::p_load(rio,tidyverse, janitor, psych, gtsummary, here, readxl, pacman, EpiSewer, ggplot2, data.table, here)
## Use here() to set working directory by specifying i_am()
setwd("~/Documents/GitHub/mask-ban-analysis/Code")
here::i_am("Code/01_clean_data.r")
# 1. LOAD AND PROCESS DATA ----
## 1.1 NYTimes Data - Mask Use by County ----
### 1.1.1 Import Data
nyt_mask_use_by_county <- import(here("Data/raw_data/mask-use-by-county.csv")) %>%
janitor::clean_names()
### 1.1.2 Rename Column
nyt_mask_use_by_county <- nyt_mask_use_by_county %>%
rename(fips = countyfp)
## 1.2 NYTimes Data - County Info ----
## You don't actually need this since you're getting so much from the 2020 rates dataset, it is exactly the same.
# ### 1.2.1 Import Data
# nyt_county_info <- import(here("Data/raw_data/us-counties.csv")) %>%
#   janitor::clean_names()
#
# ### 1.2.2 Filter to only keep NC Data
# nyt_county_info <- nyt_county_info %>%
#   filter(state == "North Carolina")
#
# ### 1.2.3 Filter to date ranges
# nyt_county_info <- nyt_county_info %>%
#   filter(date >= as.Date("2020-07-02") & date <= as.Date("2020-07-14"))
### 1.2.4 Delete unnecessary columns
# ### Since you have county rates from another dataset, deleting the ones here
# nyt_county_info <- nyt_county_info %>%
#   select(-cases, -deaths, -state)
## 1.3 COVID RATES BY COUNTY ----
### 1.3.1 Import Data
nyt_covid_rates_by_county <- import(here("Data/raw_data/us-counties-2020.csv")) %>%
janitor::clean_names()
### 1.3.2 Filter to only keep NC Data
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
filter(state == "North Carolina")
### 1.3.3 Filter to date ranges
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
filter(date >= as.Date("2020-07-02") & date <= as.Date("2020-07-14"))
### 1.3.4 Delete unnecessary columns
nyt_covid_rates_by_county <- nyt_covid_rates_by_county %>%
select(-state)
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
cdc_immunization_data <- import(here(~/Documents/GitHub/mask-ban-analysis"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
install.packages("pacman")
getwd()
setwd("/Users/xena/Documents/GitHub/mask-ban-analysis/")
### 1.4.1 Import Data
cdc_immunization_data <- import(here(~/Documents/GitHub/mask-ban-analysis/"National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
cdc_immunization_data <- import(here("National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
janitor::clean_names()
### 1.4.2 Filter to only keep NC Data
cdc_immunization_data <- cdc_immunization_data %>%
filter(geography == "North Carolina")
## 1.5 NC Population Data ----
### 1.5.1 Import Data
nc_population_data_by_county <- import(here("Data/raw_data/county-population-totals-2.csv")) %>%
janitor::clean_names()
### 1.5.2 Rename value to population
nc_population_data_by_county <- nc_population_data_by_county %>%
rename(population = value)
### 1.5.2 Delete unnecessary columns
nc_population_data_by_county <- nc_population_data_by_county %>%
select(-variable, -council_of_government_region, -metropolitan_statistical_area_2013, -vintage, -estimate_projection, -county)
## 1.6 Recent Wastewater Data ----
### 1.6.1 Import Data
wastewater_data_by_county <- import(here("Data/raw_data/wastewater_latest.csv")) %>%
janitor::clean_names()
### 1.6.2 Rename county_names to county
wastewater_data_by_county <- wastewater_data_by_county %>%
rename(county = county_names, date = date_new)
### 1.6.3 Filter to only keep dates
wastewater_data_by_county <- wastewater_data_by_county %>%
filter(date >= as.Date("2021-07-02") & date <= as.Date("2021-07-14"))
## 1.7 CDC atlas risk factors Data ----
### 1.7.1 Import Data
cdc_risk_factors<- import(here("Data/raw_data/CDC_atlas_risk_factors.csv")) %>%
janitor::clean_names()
### 1.7.2 Filter to only keep NC Data
cdc_risk_factors_nc <- cdc_risk_factors %>%
filter(cnty_fips>= "37000"& cnty_fips <= "38000")
### 1.7.3 Rename column cnty_fips to fips
cdc_risks_nc <- cdc_risk_factors_nc %>%
rename(fips = cnty_fips)
### 1.7.4 Remove county name column
cdc_risks_nc <- cdc_risks_nc %>%
select(-"display_name")
## 1.8 Percent nonwhite population Data ----
###1.8.1 Import Data
percent_nonwhite_pop <- import(here("Data/raw_data/percent_nonwhite_pop.csv")) %>%
janitor::clean_names()
### 1.8.2 Filter to only keep NC Data
nc_percent_nonwhite_pop <-percent_nonwhite_pop %>%
filter(fips>= "37000" & fips<= "38000")
## 1.9 Population density Data ----
### 1.9.1 Import Data
population_density <- import(here("Data/raw_data/population_density.csv")) %>%
janitor::clean_names()
### 1.9.2 Filter to only keep NC Data
nc_population_density <-population_density %>%
filter(fips>= "37000" & fips<= "38000")
### 1.9.3 Remove county name column
nc_population_density <- nc_population_density %>%
select(-"name")
# 2. MERGING DATA ----
## 2.1 Left join all datasets by fips, in order that it was imported
merged_data <- nyt_covid_rates_by_county %>%
left_join(nyt_mask_use_by_county, by = "fips") %>%
# left_join(cdc_immunization_data, by = "fips") %>%
left_join(nc_population_data_by_county, by = "fips") %>%
# %>% left_join(wastewater_data_by_county, by = "county", "date")
## Wastewater has a lot of missing data for now, so it is causing issues. I will return to this later
## NOT USING WASTEWATER ANYMORE
left_join(cdc_risks_nc, by = "fips") %>%
left_join(nc_percent_nonwhite_pop, by = "fips") %>%
left_join(nc_population_density, by = "fips")
## 2.2 Add column for covid prevalance
merged_data <- merged_data %>%
mutate(prevalence = cases / population)
# 3. SAVE CLEANED DATA ----
## Save cleaned data to cleaned_data folder
write_csv(merged_data, here("Data/cleaned_data/merged_data.csv"))
## Remove all other datasets
rm(list = ls()[!ls() %in% c("merged_data")])
## 1.4 CDC Data - National Immunization Data 2024 ----
### 1.4.1 Import Data
cdc_immunization_data <- import(here("National_Immunization_Survey_Adult_COVID_Module__NIS-ACM___COVIDVaxViews__Data___Centers_for_Disease_Control_and_Prevention__cdc.gov__20240627.csv")) %>%
janitor::clean_names()
### 1.4.2 Filter to only keep NC Data
cdc_immunization_data <- cdc_immunization_data %>%
filter(geography == "North Carolina")
View(cdc_immunization_data)
### 1.4.3 Filter most current data
cdc_immunization_current <- cdc_immunization_data %>%
filter(time_period == "April 1 - April 27")
## 1.2 CDC Data ----
### 1.2.1 Summary Stats
summary(cdc_immunization_current)
### 1.2.2 Detailed Summary Stats: Organized by Group Names
# Select relevant columns
selected_data <- cdc_immunization_current %>%
select(group_name, indicator_category, estimate_percent)
#use selected data to create summary table
cdc_groups_summary_table <- selected_data %>%
tbl_summary(
by = group_name,
label = list(
group_name ~ "Group Name"
)
)
View(cdc_groups_summary_table)
#view summary table
cdc_groups_summary_table
summary(merged_data)
merged_data %>%
tbl_summary()
View(merged_data)
# 3.save wide version of data
merged_data_wide<- merged_data %>%
pivot_wider(names_from = date, values_from = c("cases", "deaths", "mask_use"))
View(merged_data)
View(merged_data)
var(merged_data)
# 3.save wide version of data
merged_data_wide<- merged_data %>%
pivot_wider(names_from = county from = c("fips", "prop_diabetes", "chd_hosp", "ob_prev_adj","hypertension_hosp", "prop_poverty"))
merged_data_wide <- merged_data %>%
pivot_wider(names_from = county,
values_from = c("fips", "prop_diabetes", "chd_hosp", "ob_prev_adj", "hypertension_hosp", "prop_poverty"))
View(merged_data_wide)
merged_data_wide <- merged_data %>%
pivot_wider(names_from = county, values_from = everything())
View(merged_data_wide)
merged_data_unique <- merged_data %>%
distinct(fips, .keep_all = TRUE)
View(merged_data_unique)
merged_data_unique <- merged_data_unique %>%
select(-date, -cases, -prevalence, -deaths)
### 3.3 Pivot all data wide
merged_data_wide <- merged_data_unique %>%
pivot_wider(names_from = county, values_from = c("fips", "prop_diabetes", "chd_hosp", "ob_prev_adj", "hypertension_hosp", "prop_poverty"))
View(merged_data_wide)
###2.2 Add column for covid prevalance
merged_data <- merged_data %>%
mutate(prevalence = cases / population)
### 3.1 Remove duplicates
merged_data_unique <- merged_data %>%
distinct(fips, .keep_all = TRUE)
### 3.1 Remove duplicates
merged_data_unique <- merged_data %>%
distinct(fips, .keep_all = TRUE)
